Here's a full summary of your **Ethereum Wallet Backend Project (Tier 2 + Bonus)** including progress, tools, blockers, and workarounds:

---

## ‚úÖ **Project Summary**

### üéØ **Goal:**

Build a REST API using FastAPI that:

- Accepts an Ethereum wallet address
- Returns ETH balance, gas price, and block number
- Caches results for performance
- Stores data in a Supabase PostgreSQL database
- Exposes history of wallet data
- (Bonus) Includes Redis caching and connection pooling

---

## ‚úÖ **Progress & Accomplishments**

### üîß 1. **API Development (FastAPI)**

- Created two main endpoints:

  - `GET /eth-info?address=...`
  - `GET /wallet/{address}`

- Both endpoints fetch real-time ETH data.

### üíæ 2. **Database Integration (Supabase PostgreSQL)**

- Connected backend to Supabase PostgreSQL using `psycopg2`.
- Added a `wallet_data` table with the following columns:

  - `id`, `address`, `balance`, `gas_price`, `block_number`, `timestamp`

- Implemented data insertion via `save_balance`.

### ‚ö° 3. **Blockchain Data Fetching (Web3.py & Alchemy)**

- Used Alchemy HTTP endpoint to connect to Ethereum mainnet.
- Pulled:

  - ETH wallet balance
  - Gas price
  - Latest block number

### üîÅ 4. **Caching (Redis)**

- Integrated Redis with `redis-py` to cache:

  - Gas price
  - Block number

- TTL set to 10 seconds to reduce unnecessary blockchain calls.

### üóÉÔ∏è 5. **Wallet History Endpoint**

- Created `GET /wallet/{address}/history`
- Queries all records saved in DB for a given address
- Returns JSON history ordered by timestamp

---

## üß± Tools & Services Used

| Tool/Service | Description                                                           |
| ------------ | --------------------------------------------------------------------- |
| **FastAPI**  | Python web framework for building APIs quickly with async support     |
| **Web3.py**  | Ethereum library to interact with nodes (via Alchemy in this case)    |
| **Alchemy**  | Ethereum node provider used to query blockchain data                  |
| **Redis**    | In-memory key-value store used for caching expensive blockchain calls |
| **psycopg2** | PostgreSQL adapter for Python used to interact with Supabase DB       |
| **Supabase** | Backend-as-a-service; we used its PostgreSQL for storage              |
| **Uvicorn**  | ASGI server to run FastAPI app with hot reload                        |

---

## ‚ö†Ô∏è Blockers & Workarounds

| Issue                                                 | Resolution                                                                        |
| ----------------------------------------------------- | --------------------------------------------------------------------------------- |
| ‚ùå `psycopg2` could not resolve `supabase` hostname   | Switched from **Direct Connection** to **Transaction Pooler** which supports IPv4 |
| ‚ùå Coroutine error (`coroutine is not subscriptable`) | Fixed by awaiting `get_eth_data()` in `main.py`                                   |
| ‚ùå Missing DB columns                                 | Added `gas_price`, `block_number`, and `timestamp` via SQL                        |
| ‚ùå Chrome DevTools 404                                | Ignored ‚Äî unrelated background request from browser                               |

---

## ‚úÖ Final Status

| Component          | Status                           |
| ------------------ | -------------------------------- |
| ETH Data Fetching  | ‚úÖ Done                          |
| Redis Caching      | ‚úÖ Done                          |
| DB Write + Read    | ‚úÖ Done                          |
| Wallet History API | ‚úÖ Done                          |
| Error Handling     | ‚úÖ Basic error catching in place |
